{"version":3,"sources":["components/Square.jsx","components/Row.jsx","reducer.js","context.js","components/Board.jsx","utils.js","components/MaxtrixSetup.jsx","App.js","index.js"],"names":["React","memo","value","isCurrent","uiValue","classname","className","list","position","map","index","key","initialState","colSize","rowSize","matrix","moveCount","totalFoodCount","intialFoodCount","canMoveLeft","canMoveUp","canMoveRight","canMoveDown","moveLeft","moveRight","moveDown","moveUp","getNewState","state","canMove","newPosition","foodCount","newMatrix","canEat","row","colIndex","reducer","action","type","newState","DoggyMazeContext","createContext","DoggyMazeProvider","children","useReducer","dispatch","Provider","displayName","Board","boardRef","useRef","context","useContext","useEffect","current","focus","addEventListener","e","ref","tabIndex","length","range","count","Array","from","randNum","max","Math","round","random","countOneInMatrix","reduce","acc","totalFood","food","MatrixSetup","onSubmit","preventDefault","utils","_","i","v","x","for","name","onChange","parseInt","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAMeA,UAAMC,MAAK,YAAuC,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UAC3CC,EAAUD,EAAY,eAA0BD,EAJtC,eAAO,KAKjBG,EAAYF,EAAY,SAAW,GAEzC,OACE,0BAAMG,UAAS,iBAAYD,IACxBD,MCRQJ,MAAMC,MAAK,YAAkC,IAAnBM,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAC7C,OACE,yBAAKF,UAAU,OACZC,EAAKE,KAAI,SAACP,EAAOQ,GAAR,OACR,kBAAC,EAAD,CACEC,IAAKD,EACLR,MAAOA,EACPC,UAAWK,GAAYA,EAAS,KAAOE,W,cCX3CE,EAAe,CACnBC,QAAS,EACTC,QAAS,EACTC,OAAQ,GACRP,SAAU,GACVQ,UAAW,EACXC,eAAgB,EAChBC,gBAAiB,GAGbC,EAAc,SAAAX,GAAQ,QAAMA,EAAS,IAAM,IAC3CY,EAAY,SAAAZ,GAAQ,QAAMA,EAAS,IAAM,IACzCa,EAAe,SAACb,EAAUK,GAAX,QAAyBL,EAAS,IAAMK,EAAU,IACjES,EAAc,SAACd,EAAUM,GAAX,QAAyBN,EAAS,IAAMM,EAAU,IAEtE,SAASS,EAASf,GAChB,OAAIW,EAAYX,GAAkB,CAACA,EAAS,GAAK,EAAGA,EAAS,IACtDA,EAGT,SAASgB,EAAUhB,GACjB,OAAIa,EAAab,GAAkB,CAACA,EAAS,GAAK,EAAGA,EAAS,IACvDA,EAGT,SAASiB,EAASjB,GAChB,OAAIc,EAAYd,GAAkB,CAACA,EAAS,GAAIA,EAAS,GAAK,GACvDA,EAGT,SAASkB,EAAOlB,GACd,OAAIY,EAAUZ,GAAkB,CAACA,EAAS,GAAIA,EAAS,GAAK,GACrDA,EAGT,SAASmB,EAAYC,EAAOC,EAASC,GAAc,IACzCb,EAAsCW,EAAtCX,eAAgBD,EAAsBY,EAAtBZ,UAAWD,EAAWa,EAAXb,OAC/BgB,EAAYd,EACZe,EAAYjB,EACVkB,EAASJ,GAAWE,GAAa,EAoBvC,OAjBIE,IACFD,EAAYjB,EAAON,KAAI,SAACyB,EAAKxB,GAC3B,OAAIA,IAAUoB,EAAY,GACjBI,EAAIzB,KAAI,SAACP,EAAOiC,GACrB,OAAIA,IAAaL,EAAY,IAAM5B,GACjC6B,GAAa,EAEN,GAGF7B,KAGJgC,MAIJ,eACFN,EADL,CAEEb,OAAQiB,EACRhB,UAAWiB,EAASjB,EAAY,EAAIA,EACpCC,eAAgBc,EAChBvB,SAAUsB,IAIC,SAASM,IAAuC,IAA/BR,EAA8B,uDAAtBhB,EAAcyB,EAAQ,uCACxD7B,EAAWoB,EAAMpB,SAGrB,OAAQ6B,EAAOC,MACb,IAAK,mBACH,OAAO,eAAKV,EAAZ,GAAsBS,EAAOE,UAC/B,IAAK,kBACH,OAAO,eAAKX,EAAZ,CAAmBf,QAASwB,EAAOxB,UACrC,IAAK,kBACH,OAAO,eAAKe,EAAZ,CAAmBd,QAASuB,EAAOvB,UAErC,IAAK,YAIH,OAHAN,EAAWe,EAASK,EAAMpB,UAGnBmB,EAAYC,EAFTT,EAAYS,EAAMpB,UAEOA,GACrC,IAAK,UAIH,OAHAA,EAAWkB,EAAOE,EAAMpB,UAGjBmB,EAAYC,EAFTR,EAAUQ,EAAMpB,UAESA,GACrC,IAAK,aAIH,OAHAA,EAAWgB,EAAUI,EAAMpB,UAGpBmB,EAAYC,EAFTP,EAAaO,EAAMpB,SAAUoB,EAAMf,SAEVL,GACrC,IAAK,YAIH,OAHAA,EAAWiB,EAASG,EAAMpB,UAGnBmB,EAAYC,EAFTN,EAAYM,EAAMpB,SAAUoB,EAAMd,SAETN,GACrC,QACE,OAAOoB,GCjGb,IAAMY,EAAmBxC,IAAMyC,gBAI/B,SAASC,EAAT,GAA0C,IAAbC,EAAY,EAAZA,SAAY,EACb3C,IAAM4C,WAAWR,EAASxB,GADb,mBAChCgB,EADgC,KACzBiB,EADyB,KAGvC,OACE,kBAACL,EAAiBM,SAAlB,CAA2B5C,MAAK,eAAO0B,EAAP,CAAciB,cAC3CF,EAASf,IAPhBY,EAAiBO,YAAc,mBAYhBP,QCbA,SAASQ,IACtB,IAAMC,EAAWjD,IAAMkD,SACjBC,EAAUnD,IAAMoD,WAAWZ,GACzBK,EAAaM,EAAbN,SAWR,OATA7C,IAAMqD,WAAU,WACdJ,EAASK,QAAQC,QACjBN,EAASK,QAAQE,iBAAiB,WAAW,SAAAC,GAC3CZ,EAAS,CACPP,KAAMmB,EAAE9C,WAGX,IAGD,oCAEIwC,EAAQlC,gBAAkB,EACtB,4CAAkBkC,EAAQnC,UAA1B,sBAAwDmC,EAAQjC,iBAChE,GAGN,yBAAKZ,UAAU,QAAQoD,IAAKT,EAAUU,SAAS,KAE3CR,EAAQpC,OAAO6C,OACXT,EAAQpC,OAAON,KAAI,SAACF,EAAMG,GAAP,OACnB,kBAAC,EAAD,CACEC,IAAKD,EACLF,SAAUE,IAAUyC,EAAQ3C,SAAS,GAAK2C,EAAQ3C,SAAW,KAC7DD,KAAMA,OAGR,OCrBC,OACbsD,MAjBF,SAAeC,GACb,OAAOC,MAAMC,KAAKD,MAAMD,KAiBxBG,QAdF,WAA2B,IAAVC,EAAS,uDAAH,EACrB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAclCI,iBAXF,SAA0BvD,GACxB,OAAOA,EAAOwD,QAAO,SAACC,EAAKtC,GACzB,OAAOA,EAAIqC,QAAO,SAACE,EAAWC,GAC5B,OAAOD,EAAYC,IAClBF,KACF,KCRU,SAASG,IACtB,IAAMxB,EAAUnD,IAAMoD,WAAWZ,GACzBK,EAAaM,EAAbN,SA6CR,OAAIM,EAAQpC,OAAO6C,OAAe,KAGhC,0BAAMgB,SA/BR,SAAiBnB,GACfA,EAAEoB,iBADgB,IAGV/D,EAAqBqC,EAArBrC,QAASD,EAAYsC,EAAZtC,QAEjB,GAAKC,GAAYD,EAAjB,CAEA,IAAML,EAAW,CACf2D,KAAKC,MAAMvD,EAAU,GACrBsD,KAAKC,MAAMtD,EAAU,IAGjBC,EAAS+D,EAAMjB,MAAM/C,GAASL,KAAI,SAACsE,EAAGC,GAAJ,OAAUF,EAAMjB,MAAMhD,GAASJ,KAAI,SAACwE,EAAGC,GAAJ,OAAUJ,EAAMb,gBAC3FlD,EAAOP,EAAS,IAAIA,EAAS,IAAM,EAEnC,IAAMU,EAAkB4D,EAAMR,iBAAiBvD,GAE/C8B,EAAS,CACPP,KAAM,mBACNC,SAAU,CACRxB,SACAG,kBACAD,eAAgBC,EAChBV,gBAQqBF,UAAU,iBACjC,2BAAO6E,IAAI,UAAX,sBACA,2BAAOC,KAAK,SAAS9E,UAAU,eAAe+E,SA/ClD,SAAc5B,GACZZ,EAAS,CACPP,KAAM,kBACNzB,QAASyE,SAAS7B,EAAE8B,OAAOrF,MAAO,OA4C4BoC,KAAK,SAAS4B,IAAI,OAEhF,6BACA,6BACA,6BAEA,2BAAOiB,IAAI,OAAX,mBACA,2BAAOC,KAAK,MAAM9E,UAAU,eAAe+E,SA/C/C,SAAc5B,GACZZ,EAAS,CACPP,KAAM,kBACNxB,QAASwE,SAAS7B,EAAE8B,OAAOrF,MAAO,OA4CyBoC,KAAK,SAAS4B,IAAI,OAG7E,6BACA,6BACA,6BACA,4BAAQ5D,UAAU,YAAYgC,KAAK,UAAnC,UClDSkD,MAff,WACE,OACE,yBAAKlF,UAAU,OACb,kBAACoC,EAAD,MACG,kBACC,oCACE,kBAACiC,EAAD,MACA,kBAAC3B,EAAD,YCPZyC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.1cb291ee.chunk.js","sourcesContent":["import React from 'react';\n\nfunction getValueFromBinary(binary) {\n  return binary ? 'üçñ' : null;\n}\n\nexport default React.memo(function Square({ value, isCurrent }) {\n  const uiValue = isCurrent ? 'üêï' : getValueFromBinary(value);\n  const classname = isCurrent ? 'active' : '';\n\n  return (\n    <span className={`square ${classname}`}>\n      {uiValue}\n    </span>\n  );\n});\n","import React from 'react';\n\nimport Square from './Square';\n\nexport default React.memo(function Row({ list, position }) {\n  return (\n    <div className=\"row\">\n      {list.map((value, index) => (\n        <Square\n          key={index}\n          value={value}\n          isCurrent={position && position[0] === index}\n        />\n      ))}\n    </div>\n  )\n})\n","const initialState = {\n  colSize: 0,\n  rowSize: 0,\n  matrix: [],\n  position: [],\n  moveCount: 0,\n  totalFoodCount: 0,\n  intialFoodCount: 0,\n}\n\nconst canMoveLeft = position => !(position[0] <= 0);\nconst canMoveUp = position => !(position[1] <= 0);\nconst canMoveRight = (position, colSize) => !(position[0] >= colSize - 1);\nconst canMoveDown = (position, rowSize) => !(position[1] >= rowSize - 1);\n\nfunction moveLeft(position) {\n  if (canMoveLeft(position)) return [position[0] - 1, position[1]];\n  return position;\n}\n\nfunction moveRight(position) {\n  if (canMoveRight(position)) return [position[0] + 1, position[1]];\n  return position;\n}\n\nfunction moveDown(position) {\n  if (canMoveDown(position)) return [position[0], position[1] + 1];\n  return position;\n}\n\nfunction moveUp(position) {\n  if (canMoveUp(position)) return [position[0], position[1] - 1];\n  return position;\n}\n\nfunction getNewState(state, canMove, newPosition) {\n  const { totalFoodCount, moveCount, matrix } = state;\n  let foodCount = totalFoodCount;\n  let newMatrix = matrix;\n  const canEat = canMove && foodCount >= 1;\n\n\n  if (canEat) {\n    newMatrix = matrix.map((row, index) => {\n      if (index === newPosition[1]) {\n        return row.map((value, colIndex) => {\n          if (colIndex === newPosition[0] && value) {\n            foodCount -= 1;\n\n            return 0\n          };\n\n          return value;\n        })\n      }\n      return row;\n    });\n  }\n\n  return {\n    ...state,\n    matrix: newMatrix,\n    moveCount: canEat ? moveCount + 1 : moveCount,\n    totalFoodCount: foodCount,\n    position: newPosition,\n  };\n}\n\nexport default function reducer(state = initialState, action) {\n  let position = state.position;\n  let canMove = false;\n\n  switch (action.type) {\n    case 'INITIALIZE_BOARD':\n      return { ...state, ...action.newState };\n    case 'SET_DIMENSION_X':\n      return { ...state, colSize: action.colSize };\n    case 'SET_DIMENSION_Y':\n      return { ...state, rowSize: action.rowSize };\n\n    case 'ArrowLeft':\n      position = moveLeft(state.position);\n      canMove = canMoveLeft(state.position);\n\n      return getNewState(state, canMove, position);\n    case 'ArrowUp':\n      position = moveUp(state.position);\n      canMove = canMoveUp(state.position);\n\n      return getNewState(state, canMove, position);\n    case 'ArrowRight':\n      position = moveRight(state.position);\n      canMove = canMoveRight(state.position, state.colSize);\n\n      return getNewState(state, canMove, position);\n    case 'ArrowDown':\n      position = moveDown(state.position);\n      canMove = canMoveDown(state.position, state.rowSize);\n\n      return getNewState(state, canMove, position);\n    default:\n      return state;\n  }\n}\n\nexport { initialState };\n","import React from 'react';\n\nimport reducer, { initialState } from './reducer';\n\nconst DoggyMazeContext = React.createContext();\n\nDoggyMazeContext.displayName = 'DoggyMazeContext';\n\nfunction DoggyMazeProvider({ children }) {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  return (\n    <DoggyMazeContext.Provider value={{ ...state, dispatch }}>\n      {children(state)}\n    </DoggyMazeContext.Provider>\n  )\n}\n\nexport default DoggyMazeContext;\nexport {\n  DoggyMazeProvider,\n}\n","import React from 'react';\nimport Row from './Row';\n\nimport DoggyMazeContext from '../context';\n\nexport default function Board() {\n  const boardRef = React.useRef();\n  const context = React.useContext(DoggyMazeContext);\n  const { dispatch } = context;\n\n  React.useEffect(() => {\n    boardRef.current.focus();\n    boardRef.current.addEventListener('keydown', e => {\n      dispatch({\n        type: e.key,\n      });\n    });\n  }, []);\n\n  return (\n    <>\n      {\n        context.totalFoodCount <= 0\n          ? <h4>Total moves: {context.moveCount}; Total meat bone: {context.intialFoodCount}</h4>\n          : ''\n      }\n\n      <div className=\"board\" ref={boardRef} tabIndex=\"0\">\n        {\n          context.matrix.length\n            ? context.matrix.map((list, index) => (\n              <Row\n                key={index}\n                position={index === context.position[1] ? context.position : null}\n                list={list}\n              />\n            ))\n            : null\n        }\n      </div>\n    </>\n  )\n}\n","function range(count) {\n  return Array.from(Array(count));\n}\n\nfunction randNum(max = 1) {\n  return Math.round(Math.random() * max);\n}\n\nfunction countOneInMatrix(matrix) {\n  return matrix.reduce((acc, row) => {\n    return row.reduce((totalFood, food) => {\n      return totalFood + food;\n    }, acc);\n  }, 0);\n}\n\nexport default {\n  range,\n  randNum,\n  countOneInMatrix\n}\n","import React from 'react';\n\nimport utils from '../utils';\nimport DoggyMazeContext from '../context';\n\nexport default function MatrixSetup() {\n  const context = React.useContext(DoggyMazeContext);\n  const { dispatch } = context;\n\n\n  function setY(e) {\n    dispatch({\n      type: 'SET_DIMENSION_X',\n      colSize: parseInt(e.target.value, 10),\n    });\n  }\n\n  function setX(e) {\n    dispatch({\n      type: 'SET_DIMENSION_Y',\n      rowSize: parseInt(e.target.value, 10),\n    });\n  }\n\n  function onStart(e) {\n    e.preventDefault();\n\n    const { rowSize, colSize } = context;\n\n    if (!rowSize || !colSize) return;\n\n    const position = [\n      Math.round(colSize / 2),\n      Math.round(rowSize / 2),\n    ];\n\n    const matrix = utils.range(rowSize).map((_, i) => utils.range(colSize).map((v, x) => utils.randNum()));\n    matrix[position[1]][position[0]] = 0;\n\n    const intialFoodCount = utils.countOneInMatrix(matrix);\n\n    dispatch({\n      type: 'INITIALIZE_BOARD',\n      newState: {\n        matrix,\n        intialFoodCount,\n        totalFoodCount: intialFoodCount,\n        position,\n      }\n    })\n  }\n\n  if (context.matrix.length) return null;\n\n  return (\n    <form onSubmit={onStart} className=\"doggymazeform\">\n      <label for=\"column\">Enter column size:</label>\n      <input name=\"column\" className=\"input-number\" onChange={setY} type=\"number\" max=\"30\" />\n\n      <br />\n      <br />\n      <br />\n\n      <label for=\"row\">Enter row size:</label>\n      <input name=\"row\" className=\"input-number\" onChange={setX} type=\"number\" max=\"30\" />\n\n\n      <br />\n      <br />\n      <br />\n      <button className=\"start-btn\" type=\"submit\">Start</button>\n    </form>\n  )\n}\n","import React from 'react';\nimport Board from './components/Board';\nimport MatrixSetup from './components/MaxtrixSetup';\nimport { DoggyMazeProvider } from './context';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <DoggyMazeProvider>\n        {() => (\n          <>\n            <MatrixSetup />\n            <Board />\n          </>\n        )}\n      </DoggyMazeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}