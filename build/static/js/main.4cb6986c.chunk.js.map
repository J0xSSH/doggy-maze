{"version":3,"sources":["components/Square.jsx","components/Row.js","reducer.js","context.js","components/Board.jsx","utils.js","components/MaxtrixSetup.jsx","App.js","serviceWorker.js","index.js"],"names":["React","memo","value","isCurrent","uiValue","classname","className","cellCount","list","position","map","i","key","initialState","colSize","rowSize","matrix","moveCount","totalFoodCount","intialFoodCount","canMoveLeft","canMoveUp","canMoveRight","canMoveDown","moveLeft","moveRight","moveDown","moveUp","getNewState","state","canMove","newPosition","foodCount","newMatrix","canEat","row","index","colIndex","reducer","action","type","newState","DoggyMazeContext","createContext","DoggyMazeProvider","children","useReducer","dispatch","Provider","displayName","Board","boardRef","useRef","context","useContext","useEffect","current","focus","addEventListener","e","ref","tabIndex","length","range","count","Array","from","randNum","max","Math","round","random","countOneInMatrix","reduce","acc","totalFood","food","MatrixSetup","onSubmit","preventDefault","utils","_","v","x","initialFoodCOunt","for","name","onChange","parseInt","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAMeA,UAAMC,MAAK,YAAuC,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UAC3CC,EAAUD,EAAY,eAA0BD,EAJtC,eAAO,KAKjBG,EAAYF,EAAY,SAAW,GAEzC,OACE,0BAAMG,UAAS,iBAAYD,IACxBD,MCRQJ,MAAMC,MAAK,YAA4C,EAA7BM,UAA8B,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACxD,OACE,yBAAKH,UAAU,OACZE,EAAKE,KAAI,SAACR,EAAOS,GAAR,OACR,kBAAC,EAAD,CACEC,IAAKD,EACLT,MAAOA,EACPC,UAAWM,GAAYA,EAAS,KAAOE,W,cCX3CE,EAAe,CACnBC,QAAS,EACTC,QAAS,EACTC,OAAQ,GACRP,SAAU,GACVQ,UAAW,EACXC,eAAgB,EAChBC,gBAAiB,GAGbC,EAAc,SAAAX,GAAQ,QAAMA,EAAS,IAAM,IAC3CY,EAAY,SAAAZ,GAAQ,QAAMA,EAAS,IAAM,IACzCa,EAAe,SAACb,EAAUK,GAAX,QAAyBL,EAAS,IAAMK,EAAU,IACjES,EAAc,SAACd,EAAUM,GAAX,QAAyBN,EAAS,IAAMM,EAAU,IAEtE,SAASS,EAASf,GAChB,OAAIW,EAAYX,GAAkB,CAACA,EAAS,GAAK,EAAGA,EAAS,IACtDA,EAGT,SAASgB,EAAUhB,GACjB,OAAIa,EAAab,GAAkB,CAACA,EAAS,GAAK,EAAGA,EAAS,IACvDA,EAGT,SAASiB,EAASjB,GAChB,OAAIc,EAAYd,GAAkB,CAACA,EAAS,GAAIA,EAAS,GAAK,GACvDA,EAGT,SAASkB,EAAOlB,GACd,OAAIY,EAAUZ,GAAkB,CAACA,EAAS,GAAIA,EAAS,GAAK,GACrDA,EAGT,SAASmB,EAAYC,EAAOC,EAASC,GAAc,IACzCb,EAAsCW,EAAtCX,eAAgBD,EAAsBY,EAAtBZ,UAAWD,EAAWa,EAAXb,OAC/BgB,EAAYd,EACZe,EAAYjB,EACVkB,EAASJ,GAAWE,GAAa,EAoBvC,OAjBIE,IACFD,EAAYjB,EAAON,KAAI,SAACyB,EAAKC,GAC3B,OAAIA,IAAUL,EAAY,GACjBI,EAAIzB,KAAI,SAACR,EAAOmC,GACrB,OAAIA,IAAaN,EAAY,IAAM7B,GACjC8B,GAAa,EAEN,GAGF9B,KAGJiC,MAIJ,eACFN,EADL,CAEEb,OAAQiB,EACRhB,UAAWiB,EAASjB,EAAY,EAAIA,EACpCC,eAAgBc,EAChBvB,SAAUsB,IAIC,SAASO,IAAuC,IAA/BT,EAA8B,uDAAtBhB,EAAc0B,EAAQ,uCACxD9B,EAAWoB,EAAMpB,SAGrB,OAAQ8B,EAAOC,MACb,IAAK,mBACH,OAAO,eAAKX,EAAZ,GAAsBU,EAAOE,UAC/B,IAAK,kBACH,OAAO,eAAKZ,EAAZ,CAAmBf,QAASyB,EAAOzB,UACrC,IAAK,kBACH,OAAO,eAAKe,EAAZ,CAAmBd,QAASwB,EAAOxB,UAErC,IAAK,YAIH,OAHAN,EAAWe,EAASK,EAAMpB,UAGnBmB,EAAYC,EAFTT,EAAYS,EAAMpB,UAEOA,GACrC,IAAK,UAIH,OAHAA,EAAWkB,EAAOE,EAAMpB,UAGjBmB,EAAYC,EAFTR,EAAUQ,EAAMpB,UAESA,GACrC,IAAK,aAIH,OAHAA,EAAWgB,EAAUI,EAAMpB,UAGpBmB,EAAYC,EAFTP,EAAaO,EAAMpB,SAAUoB,EAAMf,SAEVL,GACrC,IAAK,YAIH,OAHAA,EAAWiB,EAASG,EAAMpB,UAGnBmB,EAAYC,EAFTN,EAAYM,EAAMpB,SAAUoB,EAAMd,SAETN,GACrC,QACE,OAAOoB,GCjGb,IAAMa,EAAmB1C,IAAM2C,gBAI/B,SAASC,EAAT,GAA0C,IAAbC,EAAY,EAAZA,SAAY,EACb7C,IAAM8C,WAAWR,EAASzB,GADb,mBAChCgB,EADgC,KACzBkB,EADyB,KAGvC,OACE,kBAACL,EAAiBM,SAAlB,CAA2B9C,MAAK,eAAO2B,EAAP,CAAckB,cAC3CF,EAAShB,IAPhBa,EAAiBO,YAAc,mBAYhBP,QCbA,SAASQ,IACtB,IAAMC,EAAWnD,IAAMoD,SACjBC,EAAUrD,IAAMsD,WAAWZ,GACzBK,EAAaM,EAAbN,SAWR,OATA/C,IAAMuD,WAAU,WACdJ,EAASK,QAAQC,QACjBN,EAASK,QAAQE,iBAAiB,WAAW,SAAAC,GAC3CZ,EAAS,CACPP,KAAMmB,EAAE/C,WAGX,IAGD,oCAEIyC,EAAQnC,gBAAkB,EACtB,4CAAkBmC,EAAQpC,UAA1B,sBAAwDoC,EAAQlC,iBAChE,GAGN,yBAAKb,UAAU,QAAQsD,IAAKT,EAAUU,SAAS,KAE3CR,EAAQrC,OAAO8C,OACXT,EAAQrC,OAAON,KAAI,SAACF,EAAM4B,GAAP,OACnB,kBAAC,EAAD,CACExB,IAAKwB,EACL3B,SAAU2B,IAAUiB,EAAQ5C,SAAS,GAAK4C,EAAQ5C,SAAW,KAC7DD,KAAMA,OAGR,OCrBC,OACbuD,MAjBF,SAAeC,GACb,OAAOC,MAAMC,KAAKD,MAAMD,KAiBxBG,QAdF,WAA2B,IAAVC,EAAS,uDAAH,EACrB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAclCI,iBAXF,SAA0BxD,GACxB,OAAOA,EAAOyD,QAAO,SAACC,EAAKvC,GACzB,OAAOA,EAAIsC,QAAO,SAACE,EAAWC,GAC5B,OAAOD,EAAYC,IAClBF,KACF,KCRU,SAASG,IACtB,IAAMxB,EAAUrD,IAAMsD,WAAWZ,GACzBK,EAAaM,EAAbN,SA6CR,OAAIM,EAAQrC,OAAO8C,OAAe,KAGhC,0BAAMgB,SA/BR,SAAiBnB,GACfA,EAAEoB,iBADgB,IAGVhE,EAAqBsC,EAArBtC,QAASD,EAAYuC,EAAZvC,QAEjB,GAAKC,GAAYD,EAAjB,CAEA,IAAML,EAAW,CACf4D,KAAKC,MAAMxD,EAAU,GACrBuD,KAAKC,MAAMvD,EAAU,IAGjBC,EAASgE,EAAMjB,MAAMhD,GAASL,KAAI,SAACuE,EAAGtE,GAAJ,OAAUqE,EAAMjB,MAAMjD,GAASJ,KAAI,SAACwE,EAAGC,GAAJ,OAAUH,EAAMb,gBAC3FnD,EAAOP,EAAS,IAAIA,EAAS,IAAM,EAEnC,IAAM2E,EAAmBJ,EAAMR,iBAAiBxD,GAEhD+B,EAAS,CACPP,KAAM,mBACNC,SAAU,CACRzB,SACAoE,mBACAlE,eAAgBkE,EAChB3E,gBAQqBH,UAAU,iBACjC,2BAAO+E,IAAI,UAAX,sBACA,2BAAOC,KAAK,SAAShF,UAAU,eAAeiF,SA/ClD,SAAc5B,GACZZ,EAAS,CACPP,KAAM,kBACN1B,QAAS0E,SAAS7B,EAAE8B,OAAOvF,MAAO,OA4C4BsC,KAAK,SAAS4B,IAAI,OAEhF,6BACA,6BACA,6BAEA,2BAAOiB,IAAI,OAAX,mBACA,2BAAOC,KAAK,MAAMhF,UAAU,eAAeiF,SA/C/C,SAAc5B,GACZZ,EAAS,CACPP,KAAM,kBACNzB,QAASyE,SAAS7B,EAAE8B,OAAOvF,MAAO,OA4CyBsC,KAAK,SAAS4B,IAAI,OAG7E,6BACA,6BACA,6BACA,4BAAQ9D,UAAU,YAAYkC,KAAK,UAAnC,UCjDSkD,MAff,WACE,OACE,yBAAKpF,UAAU,OACb,kBAACsC,EAAD,MACG,kBACC,oCACE,kBAACiC,EAAD,MACA,kBAAC3B,EAAD,YCDQyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4cb6986c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction getValueFromBinary(binary) {\n  return binary ? 'üçñ' : null;\n}\n\nexport default React.memo(function Square({ value, isCurrent }) {\n  const uiValue = isCurrent ? 'üêï' : getValueFromBinary(value);\n  const classname = isCurrent ? 'active' : '';\n\n  return (\n    <span className={`square ${classname}`}>\n      {uiValue}\n    </span>\n  );\n});\n","import React from 'react';\n\nimport Square from './Square';\n\nexport default React.memo(function Row({ cellCount, list, position }) {\n  return (\n    <div className=\"row\">\n      {list.map((value, i) => (\n        <Square\n          key={i}\n          value={value}\n          isCurrent={position && position[0] === i}\n        />\n      ))}\n    </div>\n  )\n})\n","const initialState = {\n  colSize: 0,\n  rowSize: 0,\n  matrix: [],\n  position: [],\n  moveCount: 0,\n  totalFoodCount: 0,\n  intialFoodCount: 0,\n}\n\nconst canMoveLeft = position => !(position[0] <= 0);\nconst canMoveUp = position => !(position[1] <= 0);\nconst canMoveRight = (position, colSize) => !(position[0] >= colSize - 1);\nconst canMoveDown = (position, rowSize) => !(position[1] >= rowSize - 1);\n\nfunction moveLeft(position) {\n  if (canMoveLeft(position)) return [position[0] - 1, position[1]];\n  return position;\n}\n\nfunction moveRight(position) {\n  if (canMoveRight(position)) return [position[0] + 1, position[1]];\n  return position;\n}\n\nfunction moveDown(position) {\n  if (canMoveDown(position)) return [position[0], position[1] + 1];\n  return position;\n}\n\nfunction moveUp(position) {\n  if (canMoveUp(position)) return [position[0], position[1] - 1];\n  return position;\n}\n\nfunction getNewState(state, canMove, newPosition) {\n  const { totalFoodCount, moveCount, matrix } = state;\n  let foodCount = totalFoodCount;\n  let newMatrix = matrix;\n  const canEat = canMove && foodCount >= 1;\n\n\n  if (canEat) {\n    newMatrix = matrix.map((row, index) => {\n      if (index === newPosition[1]) {\n        return row.map((value, colIndex) => {\n          if (colIndex === newPosition[0] && value) {\n            foodCount -= 1;\n\n            return 0\n          };\n\n          return value;\n        })\n      }\n      return row;\n    });\n  }\n\n  return {\n    ...state,\n    matrix: newMatrix,\n    moveCount: canEat ? moveCount + 1 : moveCount,\n    totalFoodCount: foodCount,\n    position: newPosition,\n  };\n}\n\nexport default function reducer(state = initialState, action) {\n  let position = state.position;\n  let canMove = false;\n\n  switch (action.type) {\n    case 'INITIALIZE_BOARD':\n      return { ...state, ...action.newState };\n    case 'SET_DIMENSION_X':\n      return { ...state, colSize: action.colSize };\n    case 'SET_DIMENSION_Y':\n      return { ...state, rowSize: action.rowSize };\n\n    case 'ArrowLeft':\n      position = moveLeft(state.position);\n      canMove = canMoveLeft(state.position);\n\n      return getNewState(state, canMove, position);\n    case 'ArrowUp':\n      position = moveUp(state.position);\n      canMove = canMoveUp(state.position);\n\n      return getNewState(state, canMove, position);\n    case 'ArrowRight':\n      position = moveRight(state.position);\n      canMove = canMoveRight(state.position, state.colSize);\n\n      return getNewState(state, canMove, position);\n    case 'ArrowDown':\n      position = moveDown(state.position);\n      canMove = canMoveDown(state.position, state.rowSize);\n\n      return getNewState(state, canMove, position);\n    default:\n      return state;\n  }\n}\n\nexport { initialState };\n","import React from 'react';\n\nimport reducer, { initialState } from './reducer';\n\nconst DoggyMazeContext = React.createContext();\n\nDoggyMazeContext.displayName = 'DoggyMazeContext';\n\nfunction DoggyMazeProvider({ children }) {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  return (\n    <DoggyMazeContext.Provider value={{ ...state, dispatch }}>\n      {children(state)}\n    </DoggyMazeContext.Provider>\n  )\n}\n\nexport default DoggyMazeContext;\nexport {\n  DoggyMazeProvider,\n}\n","import React from 'react';\nimport Row from './Row';\n\nimport DoggyMazeContext from '../context';\n\nexport default function Board() {\n  const boardRef = React.useRef();\n  const context = React.useContext(DoggyMazeContext);\n  const { dispatch } = context;\n\n  React.useEffect(() => {\n    boardRef.current.focus();\n    boardRef.current.addEventListener('keydown', e => {\n      dispatch({\n        type: e.key,\n      });\n    });\n  }, []);\n\n  return (\n    <>\n      {\n        context.totalFoodCount <= 0\n          ? <h4>Total moves: {context.moveCount}; Total meat bone: {context.intialFoodCount}</h4>\n          : ''\n      }\n\n      <div className=\"board\" ref={boardRef} tabIndex=\"0\">\n        {\n          context.matrix.length\n            ? context.matrix.map((list, index) => (\n              <Row\n                key={index}\n                position={index === context.position[1] ? context.position : null}\n                list={list}\n              />\n            ))\n            : null\n        }\n      </div>\n    </>\n  )\n}\n","function range(count) {\n  return Array.from(Array(count));\n}\n\nfunction randNum(max = 1) {\n  return Math.round(Math.random() * max);\n}\n\nfunction countOneInMatrix(matrix) {\n  return matrix.reduce((acc, row) => {\n    return row.reduce((totalFood, food) => {\n      return totalFood + food;\n    }, acc);\n  }, 0);\n}\n\nexport default {\n  range,\n  randNum,\n  countOneInMatrix\n}\n","import React from 'react';\n\nimport utils from '../utils';\nimport DoggyMazeContext from '../context';\n\nexport default function MatrixSetup() {\n  const context = React.useContext(DoggyMazeContext);\n  const { dispatch } = context;\n\n\n  function setY(e) {\n    dispatch({\n      type: 'SET_DIMENSION_X',\n      colSize: parseInt(e.target.value, 10),\n    });\n  }\n\n  function setX(e) {\n    dispatch({\n      type: 'SET_DIMENSION_Y',\n      rowSize: parseInt(e.target.value, 10),\n    });\n  }\n\n  function onStart(e) {\n    e.preventDefault();\n\n    const { rowSize, colSize } = context;\n\n    if (!rowSize || !colSize) return;\n\n    const position = [\n      Math.round(colSize / 2),\n      Math.round(rowSize / 2),\n    ];\n\n    const matrix = utils.range(rowSize).map((_, i) => utils.range(colSize).map((v, x) => utils.randNum()));\n    matrix[position[1]][position[0]] = 0;\n\n    const initialFoodCOunt = utils.countOneInMatrix(matrix);\n\n    dispatch({\n      type: 'INITIALIZE_BOARD',\n      newState: {\n        matrix,\n        initialFoodCOunt,\n        totalFoodCount: initialFoodCOunt,\n        position,\n      }\n    })\n  }\n\n  if (context.matrix.length) return null;\n\n  return (\n    <form onSubmit={onStart} className=\"doggymazeform\">\n      <label for=\"column\">Enter column size:</label>\n      <input name=\"column\" className=\"input-number\" onChange={setY} type=\"number\" max=\"30\" />\n\n      <br />\n      <br />\n      <br />\n\n      <label for=\"row\">Enter row size:</label>\n      <input name=\"row\" className=\"input-number\" onChange={setX} type=\"number\" max=\"30\" />\n\n\n      <br />\n      <br />\n      <br />\n      <button className=\"start-btn\" type=\"submit\">Start</button>\n    </form>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport MatrixSetup from './components/MaxtrixSetup';\nimport { DoggyMazeProvider } from './context';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <DoggyMazeProvider>\n        {() => (\n          <>\n            <MatrixSetup />\n            <Board />\n          </>\n        )}\n      </DoggyMazeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}